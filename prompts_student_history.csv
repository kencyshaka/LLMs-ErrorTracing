problem_id,input_text,target_errors,target_code
0,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 1, Attempt 2 

",['No error'],"public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}
"
1,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass


### Output:
Based on this history, predict the code that the student will write for 
The next question 2:
'Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.'
Evaluated concepts: ['Requirement', 'If/Else', 'NestedIf', 'LogicAndNotOr', 'LogicCompareNum', 'LogicBoolean']
 Make sure to use this method signaure public boolean in1To10(int n, boolean outsideMode){ } 

",['No error'],"public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}
"
2,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass


### Output:
Based on this history, predict the code that the student will write for 
The next question 3:
'Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.'
Evaluated concepts: ['Requirement', 'If/Else', 'NestedIf', 'LogicBoolean']
 Make sure to use this method signaure public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ } 

",['No error'],"public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}
"
3,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass


### Output:
Based on this history, predict the code that the student will write for 
The next question 4:
'Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.'
Evaluated concepts: ['Requirement', 'If/Else', 'NestedIf', 'LogicAndNotOr', 'LogicCompareNum', 'LogicBoolean']
 Make sure to use this method signaure public boolean squirrelPlay(int temp, boolean isSummer){ } 

",['No error'],"public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
"
4,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass


### Output:
Based on this history, predict the code that the student will write for 
The next question 5:
'Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.'
Evaluated concepts: ['Requirement', 'If/Else', 'NestedIf', 'Math+-*/', 'LogicAndNotOr', 'LogicCompareNum', 'LogicBoolean']
 Make sure to use this method signaure public int caughtSpeeding(int speed, boolean isBirthday){ } 

",['Missing return statement'],"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}
"
4,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 5, Attempt 2 

",['Cannot find symbol: variable'],"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}
"
4,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 5, Attempt 3 

",['Missing return statement'],"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}
"
4,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 5, Attempt 4 

",['Incompatible types like datatypes mismatch'],"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}
"
4,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 5, Attempt 5 

",['No error'],"public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass


### Output:
Based on this history, predict the code that the student will write for 
The next question 6:
'Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".'
Evaluated concepts: ['Requirement', 'If/Else', 'NestedIf', 'LogicAndNotOr', 'LogicCompareNum', 'LogicBoolean', 'StringFormat']
 Make sure to use this method signaure public String alarmClock(int day, boolean vacation){ } 

","[""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]","public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 2 

",['Incompatible types like datatypes mismatch'],"public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 3 

",['Incompatible types like datatypes mismatch'],"public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 4 

",['Cannot find symbol: variable'],"public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 5 

",['Incompatible types like datatypes mismatch'],"public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 6 

",['Incompatible types like datatypes mismatch'],"public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 7 

",['Missing return statement'],"public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 8 

",['Incompatible types like datatypes mismatch'],"public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 9 

",['Incompatible types like datatypes mismatch'],"public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 10 

",['Cannot find symbol: variable'],"public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 11 

",['Cannot find symbol: variable'],"public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}
"
5,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 6, Attempt 12 

",['No error'],"public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}
"
6,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass


### Output:
Based on this history, predict the code that the student will write for 
The next question 7:
'The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.'
Evaluated concepts: ['Requirement', 'If/Else', 'Math+-*/', 'LogicAndNotOr', 'LogicCompareNum']
 Make sure to use this method signaure public boolean love6(int a, int b){ } 

","[""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]","public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}
"
6,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 7, Attempt 2 

",['Incompatible types like datatypes mismatch'],"public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}
"
6,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 7, Attempt 3 

",['No error'],"public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}
"
7,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7,  8.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['No error']
Score: Pass


### Output:
Based on this history, predict the code that the student will write for 
The next question 8:
'When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.'
Evaluated concepts: ['Requirement', 'If/Else', 'NestedIf', 'LogicAndNotOr', 'LogicCompareNum', 'LogicBoolean']
 Make sure to use this method signaure public boolean cigarParty(int cigars, boolean isWeekend){ } 

",['not a statement'],"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend == false;
    }
    else if (cigars >= 40)
    {
        isWeekend == true;
    }
    
    return isWeekend;
        
}
"
7,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7,  8.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['No error']
Score: Pass

Question 8 
When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.
Given method signature: public boolean cigarParty(int cigars, boolean isWeekend){ }
Attempt 1:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend == false;
    }
    else if (cigars >= 40)
    {
        isWeekend == true;
    }
    
    return isWeekend;
        
}

Errors: ['not a statement']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 8, Attempt 2 

",['No error'],"public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend = false;
    }
    else if (cigars >= 40)
    {
        isWeekend = true;
    }
    
    return isWeekend;
        
}
"
8,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7,  8,  9.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['No error']
Score: Pass

Question 8 
When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.
Given method signature: public boolean cigarParty(int cigars, boolean isWeekend){ }
Attempt 1:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend == false;
    }
    else if (cigars >= 40)
    {
        isWeekend == true;
    }
    
    return isWeekend;
        
}

Errors: ['not a statement']
Score: Fail

Attempt 2:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend = false;
    }
    else if (cigars >= 40)
    {
        isWeekend = true;
    }
    
    return isWeekend;
        
}

Errors: ['No error']
Score: Pass


### Output:
Based on this history, predict the code that the student will write for 
The next question 9:
'You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).'
Evaluated concepts: ['Requirement', 'If/Else', 'LogicAndNotOr', 'LogicCompareNum']
 Make sure to use this method signaure public int dateFashion(int you, int date){ } 

","[""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]","public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you || date >= 8)
    {
        return yesTable;
    }
    else if (you || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}
"
8,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7,  8,  9.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['No error']
Score: Pass

Question 8 
When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.
Given method signature: public boolean cigarParty(int cigars, boolean isWeekend){ }
Attempt 1:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend == false;
    }
    else if (cigars >= 40)
    {
        isWeekend == true;
    }
    
    return isWeekend;
        
}

Errors: ['not a statement']
Score: Fail

Attempt 2:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend = false;
    }
    else if (cigars >= 40)
    {
        isWeekend = true;
    }
    
    return isWeekend;
        
}

Errors: ['No error']
Score: Pass

Question 9 
You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).
Given method signature: public int dateFashion(int you, int date){ }
Attempt 1:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you || date >= 8)
    {
        return yesTable;
    }
    else if (you || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 9, Attempt 2 

",['No error'],"public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you >=8 || date >= 8)
    {
        return yesTable;
    }
    else if (you <= 2 || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}
"
9,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7,  8,  9,  10.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['No error']
Score: Pass

Question 8 
When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.
Given method signature: public boolean cigarParty(int cigars, boolean isWeekend){ }
Attempt 1:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend == false;
    }
    else if (cigars >= 40)
    {
        isWeekend == true;
    }
    
    return isWeekend;
        
}

Errors: ['not a statement']
Score: Fail

Attempt 2:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend = false;
    }
    else if (cigars >= 40)
    {
        isWeekend = true;
    }
    
    return isWeekend;
        
}

Errors: ['No error']
Score: Pass

Question 9 
You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).
Given method signature: public int dateFashion(int you, int date){ }
Attempt 1:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you || date >= 8)
    {
        return yesTable;
    }
    else if (you || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you >=8 || date >= 8)
    {
        return yesTable;
    }
    else if (you <= 2 || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: ['No error']
Score: Pass


### Output:
Based on this history, predict the code that the student will write for 
The next question 10:
'You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.'
Evaluated concepts: ['Requirement', 'If/Else', 'LogicAndNotOr', 'LogicCompareNum']
 Make sure to use this method signaure public int greenTicket(int a, int b, int c){ } 

","[""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']","public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}
"
9,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7,  8,  9,  10.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['No error']
Score: Pass

Question 8 
When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.
Given method signature: public boolean cigarParty(int cigars, boolean isWeekend){ }
Attempt 1:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend == false;
    }
    else if (cigars >= 40)
    {
        isWeekend == true;
    }
    
    return isWeekend;
        
}

Errors: ['not a statement']
Score: Fail

Attempt 2:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend = false;
    }
    else if (cigars >= 40)
    {
        isWeekend = true;
    }
    
    return isWeekend;
        
}

Errors: ['No error']
Score: Pass

Question 9 
You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).
Given method signature: public int dateFashion(int you, int date){ }
Attempt 1:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you || date >= 8)
    {
        return yesTable;
    }
    else if (you || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you >=8 || date >= 8)
    {
        return yesTable;
    }
    else if (you <= 2 || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: ['No error']
Score: Pass

Question 10 
You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.
Given method signature: public int greenTicket(int a, int b, int c){ }
Attempt 1:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 10, Attempt 2 

","[""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']","public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}
"
9,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7,  8,  9,  10.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['No error']
Score: Pass

Question 8 
When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.
Given method signature: public boolean cigarParty(int cigars, boolean isWeekend){ }
Attempt 1:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend == false;
    }
    else if (cigars >= 40)
    {
        isWeekend == true;
    }
    
    return isWeekend;
        
}

Errors: ['not a statement']
Score: Fail

Attempt 2:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend = false;
    }
    else if (cigars >= 40)
    {
        isWeekend = true;
    }
    
    return isWeekend;
        
}

Errors: ['No error']
Score: Pass

Question 9 
You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).
Given method signature: public int dateFashion(int you, int date){ }
Attempt 1:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you || date >= 8)
    {
        return yesTable;
    }
    else if (you || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you >=8 || date >= 8)
    {
        return yesTable;
    }
    else if (you <= 2 || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: ['No error']
Score: Pass

Question 10 
You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.
Given method signature: public int greenTicket(int a, int b, int c){ }
Attempt 1:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail

Attempt 2:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 10, Attempt 3 

","[""'else' without 'if'"", 'ID expected e.g like ;)(""', 'not a statement']","public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b, a != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}
"
9,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7,  8,  9,  10.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['No error']
Score: Pass

Question 8 
When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.
Given method signature: public boolean cigarParty(int cigars, boolean isWeekend){ }
Attempt 1:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend == false;
    }
    else if (cigars >= 40)
    {
        isWeekend == true;
    }
    
    return isWeekend;
        
}

Errors: ['not a statement']
Score: Fail

Attempt 2:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend = false;
    }
    else if (cigars >= 40)
    {
        isWeekend = true;
    }
    
    return isWeekend;
        
}

Errors: ['No error']
Score: Pass

Question 9 
You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).
Given method signature: public int dateFashion(int you, int date){ }
Attempt 1:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you || date >= 8)
    {
        return yesTable;
    }
    else if (you || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you >=8 || date >= 8)
    {
        return yesTable;
    }
    else if (you <= 2 || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: ['No error']
Score: Pass

Question 10 
You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.
Given method signature: public int greenTicket(int a, int b, int c){ }
Attempt 1:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail

Attempt 2:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b, a != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""'else' without 'if'"", 'ID expected e.g like ;)(""', 'not a statement']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 10, Attempt 4 

","[""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']","public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b & a != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}
"
9,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7,  8,  9,  10.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['No error']
Score: Pass

Question 8 
When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.
Given method signature: public boolean cigarParty(int cigars, boolean isWeekend){ }
Attempt 1:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend == false;
    }
    else if (cigars >= 40)
    {
        isWeekend == true;
    }
    
    return isWeekend;
        
}

Errors: ['not a statement']
Score: Fail

Attempt 2:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend = false;
    }
    else if (cigars >= 40)
    {
        isWeekend = true;
    }
    
    return isWeekend;
        
}

Errors: ['No error']
Score: Pass

Question 9 
You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).
Given method signature: public int dateFashion(int you, int date){ }
Attempt 1:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you || date >= 8)
    {
        return yesTable;
    }
    else if (you || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you >=8 || date >= 8)
    {
        return yesTable;
    }
    else if (you <= 2 || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: ['No error']
Score: Pass

Question 10 
You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.
Given method signature: public int greenTicket(int a, int b, int c){ }
Attempt 1:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail

Attempt 2:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b, a != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""'else' without 'if'"", 'ID expected e.g like ;)(""', 'not a statement']
Score: Fail

Attempt 4:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b & a != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 10, Attempt 5 

","[""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]","public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b & a != c)
    {
        result = 0;
    }
    else if (a == b & b == c)
    {
        result = 20;
    }
    else if ((a = b & a != c) || (b = c & b != a) || (c = a & c != b))
    {
        result = 10;
    }
    return result;
}
"
9,"I have a detailed history of a student's performance in a Java introductory programming course during Fall 2019.
It includes the code submitted, errors encountered, scores received for multiple attempts on question  1,  2,  3,  4,  5,  6,  7,  8,  9,  10.
Below are the detailed records of their submissions:
Question 1 
Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.
Given method signature: public int sortaSum(int a, int b){ }
Attempt 1:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int sortaSum(int a, int b)
{
    int sum = a + b;
    
    if (sum < 10 || sum > 19)
    {
        return sum;
    }
    else if (sum >= 10 && sum <= 19)
    {
        return 20;
    }
    return sum;
}

Errors: ['No error']
Score: Pass

Question 2 
Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless ""outsideMode"" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.
Given method signature: public boolean in1To10(int n, boolean outsideMode){ }
Attempt 1:
Code: public boolean in1To10(int n, boolean outsideMode)
{
    if (outsideMode ==  true)
    {
        if (n <= 1 || n >= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (n >= 1 || n <= 10)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
                
}

Errors: ['No error']
Score: Pass

Question 3 
Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.
Given method signature: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){ }
Attempt 1:
Code: public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)
{    
    if (isMorning == true && isMom == true)
    {
        return true;
    }
    else if (isMorning == true && isMom == false)
    {
        return false;
    }
    else
    {
        return true;
    }
}

Errors: ['No error']
Score: Pass

Question 4 
Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.
Given method signature: public boolean squirrelPlay(int temp, boolean isSummer){ }
Attempt 1:
Code: public boolean squirrelPlay(int temp, boolean isSummer)
{
    if (isSummer == true)
    {
        if (temp >= 60 && temp <= 100)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        if (temp >= 60 && temp <= 90)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

Errors: ['No error']
Score: Pass

Question 5 
Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.
Given method signature: public int caughtSpeeding(int speed, boolean isBirthday){ }
Attempt 1:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 2:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return caughtSpeeding;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 3:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 4:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
        return isBirthday;
    }
    return speed;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int caughtSpeeding(int speed, boolean isBirthday)
{
    int noTicket = 0;
    int smallTicket = 1;
    int bigTicket = 2;
    
    if (speed >= 60)
    {
        return noTicket;
    }
    else if (speed >= 61 && speed <= 80)
    {
        return smallTicket;
    }
    else if (speed >= 81)
    {
        return bigTicket;
    }
    else if (isBirthday == true)
    {
        speed = speed + 5;
    }
    return speed;
}

Errors: ['No error']
Score: Pass

Question 6 
Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekend it should be ""10:00"". Unless we are on vacation--then on weekdays it should be ""10:00"" and weekends it should be ""off"".
Given method signature: public String alarmClock(int day, boolean vacation){ }
Attempt 1:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day = 0 || day = 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public String alarmClock(int day, boolean vacation)
{
    if (day >= 1 && day < 6)
    {
        return ""7:00"";
    }
    else if (day == 0 || day == 6)
    {
        return ""10:00"";
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 4:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 5:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	return ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""off"";
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 6:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 7:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	return ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	return ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
}

Errors: ['Missing return statement']
Score: Fail

Attempt 8:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return vacation;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 9:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return day;
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 10:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	System.out.println(""7:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""10:00"");
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	System.out.println(""10:00"");
    	}
    	else if (day == 0 || day == 6)
    	{
        	System.out.println(""off"");
    	}
    }
    return alarmClock;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 11:
Code: public String alarmClock(int day, boolean vacation)
{
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	String alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	String alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['Cannot find symbol: variable']
Score: Fail

Attempt 12:
Code: public String alarmClock(int day, boolean vacation)
{
    String alarmTime = ""on"";
    
    if (vacation == false)
    {
    	if (day >= 1 && day < 6)
    	{
        	alarmTime = ""7:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""10:00"";
    	}
    }
    else if (vacation == true)
    {
        if (day >= 1 && day < 6)
    	{
        	alarmTime = ""10:00"";
    	}
    	else if (day == 0 || day == 6)
    	{
        	alarmTime = ""off"";
    	}
    }
    return alarmTime;
}

Errors: ['No error']
Score: Pass

Question 7 
The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.
Given method signature: public boolean love6(int a, int b){ }
Attempt 1:
Code: public boolean love6(int a, int b)
{
    if (a = 6 || b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public boolean love6(int a, int b)
{
    if (a = 6)
    {
        return true;
    }
    else if (b = 6)
    {
        return true;
    }
    else if (Math.abs(a + b = 6) || Math.abs(a - b = 6) || Math.abs(b - a = 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public boolean love6(int a, int b)
{
    if (a == 6)
    {
        return true;
    }
    else if (b == 6)
    {
        return true;
    }
    else if ((a + b == 6) || (a - b == 6) || (b - a == 6))
    {
        return true;
    }
    else
    {
        return false;
    }
}

Errors: ['No error']
Score: Pass

Question 8 
When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.
Given method signature: public boolean cigarParty(int cigars, boolean isWeekend){ }
Attempt 1:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend == false;
    }
    else if (cigars >= 40)
    {
        isWeekend == true;
    }
    
    return isWeekend;
        
}

Errors: ['not a statement']
Score: Fail

Attempt 2:
Code: public boolean cigarParty(int cigars, boolean isWeekend)
{
    if (cigars >= 40 && cigars <= 60)
    {
        isWeekend = false;
    }
    else if (cigars >= 40)
    {
        isWeekend = true;
    }
    
    return isWeekend;
        
}

Errors: ['No error']
Score: Pass

Question 9 
You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).
Given method signature: public int dateFashion(int you, int date){ }
Attempt 1:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you || date >= 8)
    {
        return yesTable;
    }
    else if (you || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail

Attempt 2:
Code: public int dateFashion(int you, int date)
{
    int noTable = 0;
    int maybeTable = 1;
    int yesTable = 2;
    
    if (you >=8 || date >= 8)
    {
        return yesTable;
    }
    else if (you <= 2 || date <= 2)
    {
        return noTable;
    }
    else
    {
        return maybeTable;
    }
}

Errors: ['No error']
Score: Pass

Question 10 
You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.
Given method signature: public int greenTicket(int a, int b, int c){ }
Attempt 1:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail

Attempt 2:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail

Attempt 3:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b, a != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""'else' without 'if'"", 'ID expected e.g like ;)(""', 'not a statement']
Score: Fail

Attempt 4:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b & a != c)
    {
        result = 0;
    }
    else if (a = b = c)
    {
        result = 20;
    }
    else if ((a = b && a != c) || (b = c && b != a) || (c = a && c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'"", 'Incompatible types like datatypes mismatch']
Score: Fail

Attempt 5:
Code: public int greenTicket(int a, int b, int c)
{
    int result;
    
    if (a != b & a != c)
    {
        result = 0;
    }
    else if (a == b & b == c)
    {
        result = 20;
    }
    else if ((a = b & a != c) || (b = c & b != a) || (c = a & c != b))
    {
        result = 10;
    }
    return result;
}

Errors: [""Bad operand types for binary operator 'ID', like '&&, ||,*,+,>=,<'""]
Score: Fail


### Output:
Based on this history, predict the code that the student will write for 
Question 10, Attempt 6 

",['No error'],"public int greenTicket(int a, int b, int c)
{
    int result = 1;
    
    if (a != b & a != c)
    {
        result = 0;
    }
    else if (a == b & b == c)
    {
        result = 20;
    }
    else if ((a == b & a != c) || (b == c & b != a) || (c == a & c != b))
    {
        result = 10;
    }
    return result;
}
"
